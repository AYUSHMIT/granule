data Vect : Nat= -> Type -> Type where
  Nil  : forall (t : Type) . Vect 0 t;
  Cons : forall (t : Type, n : Nat=) . t -> Vect n t -> Vect (n+1) t

dubVect : forall (n : Nat=) . Vect n Int -> Vect (2*n) Int
dubVect xs =
    case xs of
      Nil -> Nil;
      (Cons x xs) -> Cons x (Cons 0 (dubVect xs))
