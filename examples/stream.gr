import Vec

data Stream a where
  Next : a → (() → Stream a) [0..1] → Stream a

delay : ∀ a : Type .  a → (() → a)
delay x = \() → x

force : ∀ a : Type . (() → a) → a
force t = t ()

repeat : ∀ a : Type . a [1..∞] → Stream a
repeat [x] = Next x [delay (repeat [x])]

takeS : ∀ a : Type, p : Nat . N p → Stream a → Vec p a
takeS (S Z) (Next hd [_])  = Cons hd Nil;
takeS (S n) (Next hd [tl]) = Cons hd (takeS n (force tl))

cycle : ∀ a : Type, n : Nat . (Vec (n + 1) a) [0..Inf] → Stream a
cycle [xs] = cycleInner [xs] [xs]

cycleInner
  :  ∀ a : Type, m : Nat, n : Nat
  .  (Vec (m+1) a) [0..Inf]
  → (Vec (n+1) a) [0..1]
  → Stream a
cycleInner [again] [Cons x Nil] = Next x [delay (cycleInner [again] [again])];
cycleInner [again] [Cons x xs]  = Next x [delay (cycleInner [again] [xs])]

main : Vec 7 Int
main = takeS (S (S (S (S (S (S (S Z))))))) (cycle [Cons 1 (Cons 2 (Cons 3 Nil))])
