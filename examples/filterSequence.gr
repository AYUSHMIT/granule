import Prelude
import Sequence

filter : (Int -> Bool) |âˆž| -> Sequence Int -> Sequence Int
filter |predicate| list =
    case list of
      Empty -> Empty;
      (Next x xs) -> if predicate x
        then Next x (filter |predicate| xs)
        else filter |predicate| xs

main : Sequence Int
main = filter |(\(x : Int) -> x < 3)| (Next 1 (Next 2 (Next 3 (Next 4 Empty))))
