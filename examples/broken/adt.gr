data Bool where
  False : Bool;
  True : Bool
--
-- not : Bool -> Bool
-- not x = case x of { True -> False; False -> True }
--
-- gt : Int -> Int -> Bool
-- gt x y = x > y
--
-- data Result where
--   Success : Result;
--   Failure : Result

data Maybe a where
  None : Maybe a;
  Some : a -> Maybe a

isSome : forall a : Type . Maybe a -> Maybe a
isSome x =
    case x of {
      None -> None;
      (Some |a|) -> Some |a|
    }


--
-- unMaybe : Maybe a -> a
-- unMaybe (Just a) = a

-- nonsense : Bool -> Bool
-- nonsense x = case x of { Success -> True }
--
-- main : (Bool, Result)
-- main = (True, Success)
--
-- -- bar : Int
-- -- bar = 5
-- --
--
-- --
-- -- data Either a b where
-- --   Left : a -> Either a b;
-- --   Right : b -> Either a b
