-- This works:
-- map : forall (a : Type, b : Type, n : Nat)
--     . (a -> b) |n| -> List n a -> List n b
-- map |f| ys =
--   case ys of
--     Nil -> Nil;
--     (Cons x xs) -> Cons (f x) (map |f| xs)

-- This gives Type error: List n Int is not equal to Int
map : forall (n : Nat)
    . (Int -> Int) |n| -> List n Int -> List n Int
map |f| ys =
  case ys of
    Nil -> Nil;
    (Cons x xs) -> Cons (f x) (map |f| xs)

main : List 3 Int
main = map |(\(x : Int) -> x+1)| (Cons 1 (Cons 2 (Cons 3 Nil)))
