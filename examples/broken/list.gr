promote : forall (n : Nat) -> Int |n| -> List n Int
promote 0 |c| = Nil
promote n |c| = Cons c (promote (n-1) |c|)

filter : forall n : Nat, m : Nat . (Int -> Bool) |n| -> List n Int -> List m Int where n >= m
filter |predicate| list = case list of
    Nil -> Nil;
    Cons x xs -> case predicate x of
      True -> Cons x (filter |predicate| xs);
      False -> filter |predicate| xs
