foo : List 3 Int
foo = Cons 1 (Cons 2 (Cons 3 Nil))

isEmpty : forall (n : Nat) . List n Int -> Bool
isEmpty xs =
  case xs of
    Nil        -> True;
    (Cons _ _) -> False

incList : forall (n : Nat) . List n Int -> List n Int
incList xs =
  case xs of
    Nil -> Nil;
    (Cons x ys) -> Cons (x + 1) (incList ys)

fmapl : forall (n : Nat) . (Int -> Int) |n| -> List n Int -> List n Int
fmapl |f| ys =
  case ys of
    Nil -> Nil;
    (Cons x xs) -> Cons (f x) (fmapl |f| xs)

main : List 3 Int
main = incList foo