import Prelude
import Fix

data Expr expr where
  Var Int;
  App expr expr;
  Abs Int expr

map_expr : forall a : Type, b : Type . (a -> b) [∞] -> Expr a -> Expr b
map_expr [f] e = case e of
  Var i -> Var i;
  App e1 e2 -> App (f e1) (f e2);
  Abs i e -> Abs i (f e)

cata : forall a : Type . (Expr a -> a) [∞] -> Fix Expr -> a
cata [alg] = alg `o` (map_expr [cata [alg]]) `o` unfix
