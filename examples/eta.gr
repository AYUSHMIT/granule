id :  forall (a : Type, b : Type, c : Nat) .
        (a |c| -> b) -> (a |c| -> b)
id = \x -> x

--dub |x| = x+x
dub : Int |2| -> Int |1|
dub xbox = let |x| : Int = xbox in |(x+x)|

spec : forall (a : Type, b : Type) . (a |1| -> b) -> a |0| -> b
spec x |y| = x |y|
--spec = \x -> \yBox ->
--          let |y| : a = yBox in x |y|
--spec x |y| = x |y|

--etaId : forall (a : Type, b : Type, c : Nat, d : Nat) .
--         (a |c| -> b) -> (a |d| -> b)
--etaId = \x -> \yBox ->
--          let |y| : a = yBox in x |y|

--etaId x |y| = x |y|