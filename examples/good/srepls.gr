dup : Int |2| -> Int
dup |n| = n + n

twice : forall (c : Nat) . (Int |c| -> Int) |2| -> Int |2*c| -> Int
twice |f| |n| = f |n| + f |n|

trip : Int |3| -> Int
trip |x| = x + x + x

-- main : Int
-- main = twice |dup| |10| + twice |trip| |20|

secret : Int |Hi|
secret = |4253|

hash : forall (l : Level) . Int |l| -> Int |l|
hash |x| = |(x*x)|

notAleak : (Int |Hi|) |0| -> Int |Lo|
notAleak |x| = |42|

-- main : Int |Hi|
-- main = hash secret

doTwice : (Int <[R]>) |2| -> Int <[R, R]>
doTwice |f| = let a : Int <- f in
              let b : Int <- f in pure (a + b)

main : Int <[R, R]>
main = doTwice |read|
