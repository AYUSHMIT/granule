import Maybe

data BFLevel a where
  N : a -> (BFLevel a) |1| -> BFLevel a;
  R : a -> BFLevel a

label : forall (a : Type) . BFLevel a -> a
label x =
  case x of
    (N l |_|) -> l;
    (R l)     -> l

--     1
--   /  \
--  2    3

data BFTree a where
  Empty : BFTree a;
  Next : (BFLevel a) |1| -> BFTree a -> BFTree a

root : BFLevel (Int |1|)
root = R |1|

ex0 : BFTree (Int |1|)
ex0 = Next |(N |2| |root|)| (Next |(N |3| |root|)| Empty)

last : forall (a : Type) . BFTree (a |1|) -> Maybe a
last x =
  case x of
    Empty -> None;
    (Next |x| Empty) -> Some (label x);
    (Next |x| xs)    -> last xs

exLast : Int
exLast = fromMaybe |42| (last ex0)

main : () <[W]>
main = write (intToString exLast)
