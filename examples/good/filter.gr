import Prelude

data MyList a where
  End : MyList a;
  Item : a -> MyList a -> MyList a

filter : (Int -> Bool) |âˆž| -> MyList Int -> MyList Int
filter |predicate| list =
    case list of
      End -> End;
      (Item x xs) -> if predicate x
        then Item x (filter |predicate| xs)
        else filter |predicate| xs

main : MyList Int
main = filter |(\(x : Int) -> x < 3)| (Item 1 (Item 2 (Item 3 ( Item 4 End))))
