{
	// Place your granule workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Quantifier for 'a'": {
		"prefix": "foralla",
		"body": ["forall {a : Type} . $0"]
	},

	"Quantifier for 'ab'": {
		"prefix": "forallab",
		"body": ["forall {a : Type, b : Type} . $0"]
	},

	"Quantifier for 'an'": {
		"prefix": "forallan",
		"body": ["forall {a : Type, n : Nat} . $0"]
	},

	"Quantifier for 'n'": {
		"prefix": "foralln",
		"body": ["forall {n : Nat} . $0"]
	},

	"Quantifier for 'abn'": {
		"prefix": "forallabn",
		"body": ["forall {a : Type, b : Type, n : Nat} . $0"]
	},

	"Natural number data type": {
		"prefix": "dataN",
		"body": ["data N (n : Nat) where\n    Z : N 0;\n    S : forall {n : Nat} . N n -> N (n+1)\n$0"]
	},

	"Vector data type": {
		"prefix": "dataVec",
		"body": ["data Vec (n : Nat) (a : Type) where\n    Nil : Vec 0 a;\n    Cons : forall {n : Nat} . a -> Vec n a -> Vec (n+1) a\n$0"]
	},

	"Infinity symbol": {
		"prefix": "Inf",
		"body": "âˆž"
	},

	"Line": {
		"prefix": "-l"
		"body": ["----------------------------------------"]
	}
}