import Char
import Maybe

-- takeWhile : (a -> (Bool, a)) -> VecX a -> (VecX a, VecX a)

parseInt : String -> (Maybe Int, String)
parseInt str = case stringUnsnoc str of
  Nothing -> (Nothing, ""); -- fail on empty string
  Just (init,c) -> parseIntInner (stringSnoc init c)

parseIntInner : String -> (Maybe Int, String)
parseIntInner str = case stringUnsnoc str of
  Nothing -> (0, "");
  Just (str,c) -> case digitToInt c of
    Left c -> (Nothing, stringSnoc str c);
    Right n -> case parseIntInner str of


  parseIntInner init c


  case [digitToInt [c]] of
    [Nothing] -> Nothing;
    [Just n] -> case parseInt [init] of
      Nothing -> Nothing;
      Just m -> Just (n + (m * 10))

parseInt : String [0..1] -> Maybe Int
parseInt [str] = case [stringUnsnoc str] of
  [Nothing] -> Just 0;
  [Just (init,c)] -> case [digitToInt [c]] of
    [Nothing] -> Nothing;
    [Just n] -> case parseInt [init] of
      Nothing -> Nothing;
      Just m -> Just (n + (m * 10))

-- main : Maybe Int
-- main = parseInt ["123456"]