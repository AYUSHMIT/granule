import Vec

data Stream a where
  Next : a -> (() -> Stream a) |1| -> Stream a

delay : forall a : Type .  a -> (() -> a)
delay x = \() -> x

force : forall a : Type . (() -> a) -> a
force t = t ()

ones : Stream Int
ones = Next 1 |(delay ones)|

take : forall a : Type, p : Nat . N p -> Stream a -> Vec p a
take m (Next hd tl) = case tl of |tl| -> (case m of
    (S o) -> Cons hd (take o (force tl)))
--
-- take : forall a : Type, n : Nat . N n -> Stream a -> Vec n a
-- take n (Next hd tl) = case tl of |tl| -> (case n of
--     (S Z) -> Cons hd Nil;
--     (S n) -> Cons hd (take n (force tl)))
