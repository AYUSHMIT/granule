import Vect
import Bool

filter : forall n : Nat=, m : Nat=
       . (Int -> Bool) |n| -> Vect n Int -> Vect m Int -- where n >= m
filter |predicate| vect =
    case vect of
      Nil -> Nil;
      (Cons x xs) ->
        (case predicate x of
          True -> Cons x (filter |predicate| xs);
          False -> filter |predicate| xs)
