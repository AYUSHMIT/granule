zero : N 0
zero = Z

succ : forall (n : Nat=) . N n -> N (n+1)
succ x = S x

test : forall (n : Nat=) . N n -> Float |6.0| -> Float
test n |f| =
    case n of
      Z -> f;
      (S m) -> test m |(scale 2.0 |f|)|

mapCons : forall (n : Nat=) . (Int -> Int) |n| -> Vec n Int -> Vec n Int
mapCons |f| xs =
    case xs of
      Nil -> Nil;
      (Cons y ys) -> Cons (f y + 2) (mapCons |f| ys)


--test2 : forall (r : Nat) . N r -> Float |2.0*r| -> Float
--test2 n |f| =
--  case n of
--    Z -> f;
--    (S m) -> test m |(scale 2.0 |f|)|
