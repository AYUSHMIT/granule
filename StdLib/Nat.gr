------
--- Module: Nat
--- Description: Base library for operations on type-indexed natural numbers
--- Authors: Dominic Orchard, Vilem-Benjamin Liepelt
--- License: BSD3
--- Copyright: (c) Authors 2018
--- Issue-tracking: https://github.com/dorchard/granule/issues
--- Repository: https://github.com/dorchard/granule
------

data N : Nat= -> Type where
  Z : N 0;
  S : forall n : Nat= . N n -> N (n+1)

-- # Helpers

-- ##Â Constructor wrappers
zero : N 0
zero = Z

succ : forall (n : Nat=) . N n -> N (n+1)
succ x = S x

--- Convert an indexed natural number to an untyped int
natToInt : forall (n : Nat=) . N n -> Int
natToInt x =
    case x of
      Z -> 0;
      (S m) -> 1 + natToInt m

-- # Arithmetic operations

--- Addition
add : forall (n : Nat=, m : Nat=) . N n -> N m -> N (n + m)
add n m =
  case n of
      Z      -> m
    ; (S n') -> S (add n' m)

--- Right-moded multiplication
mult : forall (n : Nat=, m : Nat=) . N n -> (N m) |n| -> N (n * m)
mult n |m| =
  case n of
      Z -> Z
    ; (S n') -> add m (mult n' |m|)

--- Left-moded multiplication
mult' : forall (n : Nat=, m : Nat=) . (N n) |m| -> (N m) -> N (n * m)
mult' |n| m =
      case m of
          Z -> Z
        ; (S m') -> add n (mult' |n| m')
