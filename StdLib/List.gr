------
--- Module: List
--- Description: Linked Lists
--- Authors: Dominic Orchard, Vilem-Benjamin Liepelt
--- License: BSD3
--- Copyright: (c) Authors 2018
--- Issue-tracking: https://github.com/dorchard/granule/issues
--- Repository: https://github.com/dorchard/granule
------

import Result

data List a where Empty; Next a (List a)

length_list : forall a : Type . List (a [0]) -> Int
length_list xs =
  case xs of
    Empty         -> 0;
    (Next |_| xs) -> 1 + length_list xs

head_list : forall a : Type . (List a) [0..1] -> Result a
head_list xs =
  case xs of
    [Empty]      -> Failed ["Empty list!"];
    [(Next x _)] -> Ok x


pushList : forall (k : Nat, a : Type)
         . (List a) |k+1| -> List (a |k+1|)
pushList xs =
    case xs of
      |Empty|       -> Empty;
      |(Next x xs)| -> Next |x| (pushList |xs|)

pullList : forall (k : Nat, a : Type)
         . List (a |k|) -> (List a) |k|
pullList xs =
    case xs of
       Empty -> |Empty|;
       (Next |x| xs) ->
         case pullList xs of
          |ys| -> |(Next x ys)|
