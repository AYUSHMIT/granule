------
--- Module: List
--- Description: Base library for operations on type-indexed lists
--- Authors: Dominic Orchard, Vilem-Benjamin Liepelt
--- License: BSD3
--- Copyright: (c) Authors 2018
--- Issue-tracking: https://github.com/dorchard/granule/issues
--- Repository: https://github.com/dorchard/granule
------

-- # Operations on lists

--- Map function
map : forall (a : Type, b : Type, n : Nat=)
    . (a -> b) |n| -> List n a -> List n b
map |f| ys =
  case ys of
    Nil -> Nil;
    (Cons x xs) -> Cons (f x) (map |f| xs)

-- Append two lists
append : forall (a : Type, n : Nat=, m : Nat=)
       . List n a -> List m a -> List (n + m) a
append xs ys =
  case xs of
    Nil -> ys;
    (Cons x xs) -> Cons x (append xs ys)

-- Length of an indexed list into an indexed nat
length : forall (a : Type, n : Nat=)
       . List n (a |0|) -> N n
length xs =
  case xs of
    Nil -> Z;
    (Cons |_| xs) -> S (length xs)

-- Standard foldr on lists
foldr : forall (a : Type, b : Type, n : Nat=)
      . (a -> b -> b) |n| -> b -> List n a -> b
foldr |h| acc xs =
  case xs of
    Nil -> acc;
    (Cons x xs) -> h x (foldr |h| acc xs)

--- Return the first item (head) of the list
--- NB: non-linear in the list
head : forall (a : Type, n : Nat=)
     . (List (n + 1) a) |1| -> a
head xs = case xs of |(Cons x _)| -> x

--- Return the list with the first item removed
--- NB: non-linear in the list
tail : forall (a : Type, n : Nat=)
     . (List (n + 1) a) |1| -> List n a
tail xs = case xs of |(Cons _ xs)| -> xs

--- Simple folds
sum : forall n : Nat= . List n Int -> Int
sum = foldr |(\(x : Int) -> \(y : Int) -> x + y)| 0

product : forall n : Nat= . List n Int -> Int
product = foldr |(\(x : Int) -> \(y : Int) -> x * y)| 1

--- Replicate n x is a list of length n with x the value of every element
replicate : forall (n : Nat=, a : Type) . N n -> a |n| -> List n a
replicate n |c| = case n of
    Z -> Nil;
    (S n) -> Cons c (replicate n |c|)

--- Make a list of length n with all integers from 0 to n-1
---     > range (S (S (S (S Z))))
---     Cons 0 (Cons 1 (Cons 2 (Cons 3 Nil)))
range : forall n : Nat= . N n -> List n Int
range n = range' n |0|

--- Make a list of length n with all integers from `start` up until `n + i - 1`
---     > range' (S (S (S (S Z)))) |-6|
---     Cons -6 (Cons -5 (Cons -4 (Cons -3 Nil)))
range' : forall n : Nat= . N n -> Int |n| -> List n Int
range' n |i| =
    case n of
    Z -> Nil;
    (S n) -> Cons i (range' n |(i + 1)|)

--- pushList pushes in non linearity of list into the elements
pushList : forall (k : Nat, n : Nat=, a : Type)
         . (List n a) |k+1| -> List n (a |k+1|)
pushList xs =
    case xs of
      |Nil|         -> Nil;
      |(Cons x xs)| -> Cons |x| (pushList |xs|)

--- pullList pulls non linearity in elements into a non linearity on the whole list
pullList : forall (k : Nat, n : Nat=, a : Type)
         . List n (a |k|) -> (List n a) |k|
pullList xs =
    case xs of
       Nil -> |Nil|;
       (Cons |x| xs) ->
         case pullList xs of
          |ys| -> |(Cons x ys)|
