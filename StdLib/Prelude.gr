-- # Prelude library for Granule

-- ## Standard, miscellaneous functional combinators

-- Identity function
id : forall a : Type . a -> a
id x = x

-- Constant combinator
const : forall a : Type, b : Type . a -> b |0| -> a
const x |y| = x

-- Flip the order of parameters
flip : forall a : Type, b : Type, c : Type . (a -> b -> c) -> b -> a -> c
flip f x y = f y x

-- until p f yields the result of applying f until p holds.
until : forall a : Type .
        (a -> Bool) |∞| -> (a -> a) |∞| -> a |∞| -> a
until |p| |f| |x| =
  case p x of
    False -> x;
    True  -> until |p| |f| |(f x)|

-- standard fixed point
fix : forall (a : Type) . (a -> a) |Inf| -> a
fix |f| = f (fix |f|)

-- specialised first-order fixed point
fixF : forall (a : Type, b : Type)
     . ((a -> b) |Inf| -> (a -> b)) |Inf| -> (a -> b)
fixF |f| = f |(fixF |f|)|


-- Conditional on integers
if0 : forall a : Type . Int |1| -> a |1| -> a |1| -> a
if0 g |x| |y| =
  case g of |0| -> x;
            |n| -> y

-- ## Combinators involving products (pairs)

-- Extract the left part of a pair
fst : forall a : Type, b : Type . (a, b |0|) -> a
fst (x, |_|) = x

-- Extract the right part of a pair
snd : forall a : Type, b : Type . (a |0|, b) -> b
snd (|_|, y) = y

-- curry converts an uncurried function to a curried function
curry : forall a : Type, b : Type, c : Type .
        ((a, b) -> c) -> a -> b -> c
curry f x y = f (x, y)

-- uncurry converts a curried function to a function on pairs
uncurry : forall a : Type, b : Type, c : Type .
          (a -> b -> c) -> ((a, b) -> c)
uncurry f (x, y) = f x y

-- ## Coeffect-specifc combinators

-- Coeffectful composition
comp : forall (n : Nat, m : Nat, a : Type, b : Type, c : Type) .
       (b |n| -> c) -> (a |m| -> b) |n| -> a |n * m| -> c
comp g |f| |x| = g |(f |x|)|

-- Flatten two boxes (with Nat grading)
flatten : forall (a : Type, n : Nat, m : Nat) . a |n| |m| -> a |n * m|
flatten ||x|| = |x|

-- Expand two boxes (with Nat grading)
unflatten : forall (a : Type, n : Nat, m : Nat) . a |n*m| -> a |n| |m|
unflatten |x| = ||x||

-- Push coeffects on a pair into the left and right elements
push : forall (a : Type, b : Type, n : Nat) . (a, b) |n| -> (a |n|, b |n|)
push |(x, y)| = (|x|, |y|)

-- Pull coeffects of pair elements up to the pair
pull : forall (a : Type, b : Type, n : Nat, m : Nat)
     . (a |n|, b |m|) -> (a, b) |n /\ m|
pull (|x|, |y|) = |(x, y)|

-- # Indexed list combinators

-- * Operations on lists
map : forall (a : Type, b : Type, n : Nat=)
    . (a -> b) |n| -> List n a -> List n b
map |f| ys =
  case ys of
    Nil -> Nil;
    (Cons x xs) -> Cons (f x) (map |f| xs)

foldr : forall (a : Type, b : Type, n : Nat=)
      . (a -> b -> b) |n| -> b -> List n a -> b
foldr |h| acc xs =
  case xs of
    Nil -> acc;
    (Cons x xs) -> h x (foldr |h| acc xs)

sum : forall n : Nat= . List n Int -> Int
sum = foldr |(\(x : Int) -> \(y : Int) -> x + y)| 0

product : forall n : Nat= . List n Int -> Int
product = foldr |(\(x : Int) -> \(y : Int) -> x * y)| 1

-- # Indexed natural number combinators

-- Convert an indexed natural number to an untyped int
natToInt : forall (n : Nat=) . N n -> Int
natToInt x =
    case x of
      Z -> 0;
      (S m) -> 1 + natToInt m
