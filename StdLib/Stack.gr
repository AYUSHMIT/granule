-- Use vectors to implement stacks
import Vec

pop : forall {n : Nat, a : Type} . Vec (n+1) a -> (a, Vec n a)
pop = uncons

push : forall {n : Nat, a : Type} . a -> Vec n a -> Vec (n+1) a
push = Cons

peek : forall {n : Nat, a : Type} . (Vec (n+1) a) [1..2] -> (a, Vec (n+1) a)
peek [Cons x xs] = (x, Cons x xs)

peek' : forall {m : Ext Nat, a, n : Nat}
      . Vec (n+1) (a [m..m+1]) -> (a, Vec (n+1) (a [m..m]))
peek' (Cons [x] xs) =
  let ys : Vec n (a [m..m]) = xs;
      y  : a [m..m]         = [x]
  in (x, Cons y ys)

peek'' : forall {n : Nat, a : Type} . Vec (n+1) (a [1..2]) -> (a, Vec (n+1) a)
peek'' (Cons [x] xs) = (x, let [xs'] : ((Vec n a) [1..2]) = pullVec xs in Cons x xs')
