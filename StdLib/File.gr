module File where

import Maybe

--- Read a string of a specified length from a file
readMany : Int → Handle R → (Handle R, String) <IO>
readMany 0 h = pure (h, "");
readMany n h =
  let (h, c)  ← readChar h;
      (h, cs) ← readMany (n - 1) h
  in pure (h, stringCons c cs)

auxiliaryReadFile : Handle R -> String -> (Handle R, String) <{Read, IOExcept}>
auxiliaryReadFile h rest = let
  (h, flag) <- isEOF h
  in
    case flag of
     True -> pure (h, rest);
     False -> let
      (h, c) <- readChar h in auxiliaryReadFile h (stringSnoc rest c)

--- Given a filename, open the file, read it all in, and close it
readFile : String -> String <{Open, Read, Close, IOExcept}>
readFile fileName = let
  h <- openHandle ReadMode fileName;
  (h, fileData) <- auxiliaryReadFile h "";
  () <- closeHandle h
  in pure fileData

auxiliaryWriteFile : Handle W -> String -> (Handle W) <{Write, IOExcept}>
auxiliaryWriteFile h rest =
  case stringUncons rest of
    Nothing -> pure h;
    Just (c, rest) -> let
      h <- writeChar h c
      in auxiliaryWriteFile h rest

--- Given a filename, and a string, open the file, write the string, and close
writeFile : String -> String -> () <{Open, Write, Close, IOExcept}>
writeFile fileName fileData = let
  h <- openHandle WriteMode fileName;
  h <- auxiliaryWriteFile h fileData
  in closeHandle h