import Maybe

readMany : Int → Handle R → (Handle R, String) <IO> 
readMany 0 h = pure (h, "");
readMany n h =
  let (h, c)  ← readChar h;
      (h, cs) ← readMany (n - 1) h
  in pure (h, stringCons c cs)

readFile : String -> String <{Open,Read,Close,IOExcept}>
readFile filename =
  let h      <- openHandle ReadMode filename;
      (h, cs) <- readUntilEnd h;
      ()       <- closeHandle h
  in pure cs

readUntilEnd : Handle R -> (Handle R, String) <{Read,IOExcept}> 
readUntilEnd h =
  let (h, eof) <- isEOF h in
    case eof of
      True -> pure (h, "");
      False ->
        let (h, c)   <- readChar h;
            (h, str) <- readUntilEnd h
        in pure (h, stringCons c str)

auxiliaryWriteFile : Handle W -> String -> (Handle W) <{Write, IOExcept}>
auxiliaryWriteFile h rest =
  case stringUncons rest of
    None -> pure h;
    Some (c, rest) -> let
      h <- writeChar h c
      in auxiliaryWriteFile h rest

writeFile : String -> String -> () <{Open, Write, Close, IOExcept}>
writeFile fileName fileData = let
  h <- openHandle WriteMode fileName;
  h <- auxiliaryWriteFile h fileData
  in closeHandle h