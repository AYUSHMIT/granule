------
--- Module: Vec
--- Description: Base library for operations on type-indexed vectors
--- Authors: Dominic Orchard, Vilem-Benjamin Liepelt
--- License: BSD3
--- Copyright: (c) Authors 2018
--- Issue-tracking: https://github.com/dorchard/granule/issues
--- Repository: https://github.com/dorchard/granule
------

-- # Operations on vectors

import Nat
-- import Prelude

data Vec (n : Nat) t where
  Nil  : Vec 0 t;
  Cons : t -> Vec n t -> Vec (n+1) t

-- Length of an indexed vector into an indexed nat
length : forall (a : Type, n : Nat)
       . Vec n (a [0]) -> N n
length xs =
  case xs of
    Nil -> Z;
    Cons [_] xs -> S (length xs)

--- Map function
map : forall (a : Type, b : Type, n : Nat)
    . (a -> b) [n] -> Vec n a -> Vec n b
map [f] ys =
  case ys of
    Nil -> Nil;
    Cons x xs -> Cons (f x) (map [f] xs)

-- map' : forall (a : Type, b : Type, n : Nat)
--      . (a -> b) [n] -> Vec n a -> Vec n b
-- map' [f] = foldr [(der Cons) `comp` f] Nil

-- Standard foldr on vectors
foldr : forall (a : Type, b : Type, n : Nat)
      . (a -> b -> b) [n] -> b -> Vec n a -> b
foldr [f] z xs =
  case xs of
    Nil -> z;
    Cons x xs -> f x (foldr [f] z xs)

-- The type reflects that we don't use the magma in the case when n = 0 and the
-- vector contains only a single element.
-- foldr1 : forall (a : Type, n : Nat)
--       . (a -> a -> a) [n] -> Vec (n + 1) a -> a
-- foldr1 [m] xs = case xs of
--     Cons x Nil -> x;
--     Cons x xs -> m x (foldr1 [m] xs)

foldl : forall (a : Type, b : Type, n : Nat)
      . (b -> a -> b) [n] -> b -> Vec n a -> b
foldl [f] acc xs =
  case xs of
    Nil -> acc;
    Cons x xs -> foldl [f] (f acc x) xs

-- foldl1 : forall (a : Type, n : Nat)
--       . (a -> a -> a) [n] -> Vec (n + 1) a -> a
-- foldl1 [m] xs = case xs of
--     Cons x Nil -> x;
--     Cons x1 (Cons x2 xs) -> foldl1 [m] (Cons (m x1 x2) xs)
--
-- reverse : forall (a : Type, n : Nat)
--         . Vec n a -> Vec n a
-- reverse = foldl [Cons] Nil

-- Append two vectors
append : forall (a : Type, n : Nat, m : Nat)
       . Vec n a -> Vec m a -> Vec (n + m) a
append xs ys =
  case xs of
    Nil -> ys;
    Cons x xs -> Cons x (append xs ys)

--- Return the first item (head) of the vector
--- NB: non-linear in the vector
head : forall (a : Type, n : Nat)
     . (Vec (n + 1) a) [0..1] -> a
head xs = case xs of [Cons x _] -> x

-- head' : forall (a : Type, n : Nat)
--      . (Vec (n + 1) a) [0..1] -> a
-- head' xs = foldr1 const

--- Return the vector with the first item removed
--- NB: non-linear in the vector
tail : forall (a : Type, n : Nat)
     . (Vec (n + 1) a) [0..1] -> Vec n a
tail xs = case xs of [(Cons _ xs)] -> xs

uncons : forall a : Type, n : Nat
       . Vec (n + 1) a -> (a, Vec n a)
uncons xs = case xs of Cons x xs -> (x,xs)

--- Split a vector at position 'n'
split : forall (n : Nat, m : Nat, a : Type)
         . N n -> (Vec (n + m) a) -> (Vec n a, Vec m a)
split n xs =
      case (n, xs) of
        (Z , xs) -> (Nil, xs);
        (S n, Cons x xs) ->
           let (xs', ys') = split n xs
           in (Cons x xs', ys')

--- Simple folds
sum : forall n : Nat . Vec n Int -> Int
sum = foldr [\(x : Int) -> \(y : Int) -> x + y] 0

product : forall n : Nat . Vec n Int -> Int
product = foldr [\(x : Int) -> \(y : Int) -> x * y] 1

--- Replicate n x is a vector of length n with x the value of every element
replicate : forall (n : Nat, a : Type) . N n -> a [n] -> Vec n a
replicate n [c] = case n of
    Z -> Nil;
    S n -> Cons c (replicate n [c])

--- Make a vector of length n with all integers from 0 to n-1
---     > range (S (S (S (S Z))))
---     Cons 0 (Cons 1 (Cons 2 (Cons 3 Nil)))
range : forall n : Nat . N n -> Vec n Int
range n = range' n [0]

--- Make a vector of length n with all integers from `start` up until `n + i - 1`
---     > range' (S (S (S (S Z)))) |-6|
---     Cons -6 (Cons -5 (Cons -4 (Cons -3 Nil)))
range' : forall n : Nat . N n -> Int [n] -> Vec n Int
range' n [i] =
    case n of
    Z -> Nil;
    S n -> Cons i (range' n [i + 1])

--- pushVec pushes in non linearity of vector into the elements
pushVec : forall (k : Nat, n : Nat, a : Type)
         . (Vec n a) [k+1] -> Vec n (a [k+1])
pushVec xs =
    case xs of
      [Nil]       -> Nil;
      [Cons x xs] -> Cons [x] (pushVec [xs])

--- pullVec pulls non linearity in elements into a non linearity on the whole vector
pullVec : forall (k : Nat, n : Nat, a : Type)
         . Vec n (a [k]) -> (Vec n a) [k]
pullVec xs =
    case xs of
       Nil -> [Nil];
       Cons [x] xs ->
         case pullVec xs of
          [ys] -> [Cons x ys]
