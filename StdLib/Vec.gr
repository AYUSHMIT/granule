------
--- Module: Vec
--- Description: Vectors. Size-indexed linked lists.
--- Authors: Dominic Orchard, Vilem-Benjamin Liepelt
--- License: BSD3
--- Copyright: (c) Authors 2018
--- Issue-tracking: https://github.com/dorchard/granule/issues
--- Repository: https://github.com/dorchard/granule
------

import Nat

data Vec : Nat= -> Type -> Type where
  NilV : forall a : Type . Vec 0 a;
  ConsV : forall n : Nat=, a : Type . a -> Vec n a -> Vec (n + 1) a

--- Get the first element from a non-empty `Vec`.
head : forall a : Type, n : Nat= . (Vec (n + 1) a) |1| -> a
head xs = case xs of |(ConsV x _)| -> x

--- Remove the first element from the `Vec`.
tail : forall a : Type, n : Nat= . (Vec (n + 1) a) |1| -> Vec n a
tail xs = case xs of |(ConsV _ xs)| -> xs

--- Stick two lists together.
append : forall a : Type, m : Nat=, n : Nat=
       . Vec m a -> Vec n a -> Vec (m + n) a
append xs ys = case xs of
    NilV -> ys;
    (ConsV x xs) -> (ConsV x (append xs ys))


map : forall (a : Type, b : Type, n : Nat=)
    . (a -> b) |n| -> Vec n a -> Vec n b
map |f| ys =
  case ys of
    NilV -> NilV;
    (ConsV x xs) -> ConsV (f x) (map |f| xs)


-- Length of an indexed list into an indexed nat
length : forall (a : Type, n : Nat=)
       . Vec n (a |0|) -> N n
length xs =
  case xs of
    NilV -> Z;
    (ConsV |_| xs) -> S (length xs)

-- Standard foldr on lists
foldr : forall (a : Type, b : Type, n : Nat=)
      . (a -> b -> b) |n| -> b -> Vec n a -> b
foldr |h| acc xs =
  case xs of
    NilV -> acc;
    (ConsV x xs) -> h x (foldr |h| acc xs)


--- Simple folds
sum : forall n : Nat= . Vec n Int -> Int
sum = foldr |(\(x : Int) -> \(y : Int) -> x + y)| 0

product : forall n : Nat= . Vec n Int -> Int
product = foldr |(\(x : Int) -> \(y : Int) -> x * y)| 1

--- Replicate n x is a list of length n with x the value of every element
replicate : forall (n : Nat=, a : Type) . N n -> a |n| -> Vec n a
replicate n |c| = case n of
    Z -> NilV;
    (S n) -> ConsV c (replicate n |c|)

--- Make a list of length n with all integers from 0 to n-1
---     > range (S (S (S (S Z))))
---     ConsV 0 (ConsV 1 (ConsV 2 (ConsV 3 NilV)))
range : forall n : Nat= . N n -> Vec n Int
range n = range' n |0|

--- Make a list of length n with all integers from `start` up until `n + i - 1`
---     > range' (S (S (S (S Z)))) |-6|
---     ConsV -6 (ConsV -5 (ConsV -4 (ConsV -3 NilV)))
range' : forall n : Nat= . N n -> Int |n| -> Vec n Int
range' n |i| =
    case n of
    Z -> NilV;
    (S n) -> ConsV i (range' n |(i + 1)|)

--- pushVec pushes in non linearity of list into the elements
pushVec : forall (k : Nat, n : Nat=, a : Type)
         . (Vec n a) |k| -> Vec n (a |k|)
pushVec xs =
    case xs of
      |NilV|         -> NilV;
      |(ConsV x xs)| -> ConsV |x| (pushVec |xs|)

--- pullVec pulls non linearity in elements into a non linearity on the whole list
pullVec : forall (k : Nat, n : Nat=, a : Type)
         . Vec n (a |k|) -> (Vec n a) |k|
pullVec xs =
    case xs of
       NilV -> |NilV|;
       (ConsV |x| xs) ->
         case pullVec xs of
          |ys| -> |(ConsV x ys)|
