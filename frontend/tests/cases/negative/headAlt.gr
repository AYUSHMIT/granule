data Vec : Nat -> Type -> Type where
  Nil : forall {a : Type} . Vec 0 a;
  Cons : forall {a : Type, n : Nat} . a -> Vec n a -> Vec (n+1) a

headAlt : forall {a : Type, n : Nat} . {n > 0} => (Vec n Int) [0..1] -> Int
headAlt [Nil] = 42; -- should make the type checking fail
headAlt [Cons x _] = x
