-- Test of case vs equations for matching on constructor
-- with polymorphic grades

data BFLevel (c : Nat) a where
  Node : a → (BFLevel c a) [0..c] → BFLevel c a;
  Root : a → BFLevel c a

labelAlt : ∀ {a : Type} . BFLevel 1 a → a
labelAlt (Node l [_]) = l;
labelAlt (Root l)     = l

label : ∀ {a : Type} . BFLevel 1 a → a
label x =
  case x of
    (Node l [_]) → l;
    (Root l)     → l

-- data List (n : Nat) (a : Type) where
--   Next : a [n] -> List n a -> List n a;
--   End  : List n a

-- split : forall {a : Type, n : Nat} .
--         a [n + n] -> List (n + n) a -> (List n (a, a), List n (a, a))
-- split [ex] ys = case ys of
--   (Next [x] xs) ->
--    let (xs1, xs2) = split [ex] xs
--    in (Next [(ex, x)] xs1 , Next [(ex, x)] xs2);
--   End -> (End, End)

-- data Bool = True | False

-- not : Bool [0] -> Bool
-- not [True] = True;
-- not [False] = False

-- data Thing (c : Nat) where
--    Yes : Bool [c] -> Thing c;
--    No  : Thing c

-- hm : Thing 0 -> Bool
-- hm x = case x of
--   (Yes [True])  -> False;
--   (Yes [False]) -> True;
--   No          -> False

-- not' : Bool [0] -> Bool
-- not' x = case x of
--    [True] -> True;
--    [False] -> False



-- isRoot : forall {a : Type, n : Nat} .
--          (BFLevel n a) [0] -> Bool
-- isRoot [Root _]     = True;
-- isRoot [Node _ [_]] = False