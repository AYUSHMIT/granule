--
--
--
data List a where
  NilL : List a;
  ConsL : a → List a → List a

-- drop : List a → ()
-- drop x = ()

--
--
-- drop : ∀ a : Type . (List a) [0]  → ()
-- drop [_] = ()













drop1 : ∀ a : Type . (List a) [0] → ()
drop1 [_] = ()




--
--
--
--
--
-- --
-- --
-- --

-- polymorphism allows us to consume the list, but ignore the elements
drop2 : ∀ b : Type . List (b [0]) → ()
drop2 NilL           = ();
drop2 (ConsL [_] xs) = drop2 xs
-- --
-- --
-- --
-- --
-- --
-- --
-- --
-- --
-- -- -- define `map`
mapL : ∀ a : Type, b : Type . (a → b) [0..∞] → List a → List b
mapL [f] NilL = NilL;
mapL [f] (ConsL x xs) = ConsL (f x) (mapL [f] xs)
-- --
-- --
-- --
-- --
-- --
-- --
-- --
-- --
-- --
dub : Int [2] → Int
dub [x] = x + x

-- --
-- --
-- -- -- data Vector (n : Nat) a where
-- -- --   ConsV : a → Vector n a → Vector (n + 1) a;
-- -- --   NilV : Vector 0 a
-- --
import Vec
-- --
-- --
-- --
-- --
-- --
-- --
-- --
-- --
-- --
-- --
-- --
-- length' : ∀ a : Type, n : Nat
--         . Vec n a
--        → N n × Vec n a
-- length' Nil = (Z, Nil);
-- length' (Cons x xs) = let
--   (n, xs) = length' xs
--   in (S n, Cons x xs)
-- --
-- --
-- --
-- -- sq : Int [2] → Int
-- -- sq [x] = x*x
-- --
-- -- input : Vec 3 Int
-- -- input = Cons 1 (Cons 2 (Cons 3 Nil))
-- -- --
-- -- -- main : Vec 3 Int
-- -- -- main = let
-- -- --
-- -- --   map [sq] input
-- --
-- --
-- --
-- --
-- --
-- -- -- > Leftpad. Takes a padding character, a string, and a total length, returns
-- -- -- > the string padded to that length with that character. If length is less
-- -- -- > than the length of the string, does nothing. -- Credits: Hillel Wayne
-- --
-- -- -- leftPad 'a' 4 "bb"   = "aabb"
-- -- -- leftPad 'a' 4 "bbbb" = "bbbb"
-- --
-- --
-- leftPad : ∀ a : Type, m : Nat, n : Nat
--         . a [n - m]
--         → N n
--         → Vec m a
--         → Vec (m + (n - m)) a
-- leftPad [c] n str = let
--   (m, str) = length' str
--   in append (replicate (monus n m) [c]) str
-- --
-- --
-- -- -- id : (0 T : Type) → (a : T) → a
-- -- -- id _ x = x
-- --
-- -- -- main : Vec 3 Int
-- -- -- main = leftPad [0] (S (S Z)) input
-- --
-- --
-- --
-- --
-- -- --
-- -- --
-- -- --
-- -- data Patient = Patient
-- --   (Int [Private]) -- Patient id
-- --   (Int [Public])  -- Patient age
-- --
-- -- meanAge : List (Patient [0..1]) → Int [Public]
-- -- meanAge xs = meanAgeInner xs [0] [0]
-- --
-- -- meanAgeInner : List (Patient [0..1]) -- Patient database
-- --        → Int [Public]
-- --        → Int [Public]
-- --        → Int [Public]
-- -- meanAgeInner (ConsL [Patient [id] [age]] NilL) [acc] [n]
-- --     = [div (age + acc) (n + 1)];
-- -- meanAgeInner (ConsL [Patient [id] [age]] ps) [acc] [n]
-- --     = meanAgeInner ps [age + acc] [n+1]
--
-- -- -- main : Int [Public]
-- -- -- main = meanAge (ConsL [Patient [1] [20]] (ConsL [Patient [2] [40]] NilL))
-- -- --
