data Bool where True; False

foo : Int -> Int |0..1| -> Int
foo x |y| = if x > 5 then 0 else y

foo1 : Int -> Int |0..2| -> Int
foo1 x |y| = if x > 5 then 0 else y+y

foo2 : Int -> Int |1..2| -> Int
foo2 x |y| = if x > 5 then y else y+y

-- good: this shouldn't typecheck because the correct lb is 1
-- foo3 : Int -> Int |2..2| -> Int
-- foo3 x |y| = if x > 5 then y else y+y

foo4 : Int |1..1| -> Int
foo4 |x| = x

-- TODO: give a nicer error when we can trivially see that lb > ub
-- foo5 : Int |2..1| -> Int
-- foo5 |x| = x

-- bad! This shouldn't typecheck, the correct lb is 2
foo6 : Int -> Int |1..2| -> Int
foo6 x |y| = if x > y then y else y

-- bad! This should typecheck!
foo7 : Int |1..Inf| -> Int
foo7 |n| = if n == 0 then 1 else foo7 |(n - 1)|

-- bad! This should typecheck!
foo8 : Int -> Int |2..3| -> Int
foo8 x |y| = if x > y then y else y + y

-- bad! This shouldn't typecheck!
foo9 : Int -> Int |1..3| -> Int
foo9 x |y| = if x > y then y else y + y
