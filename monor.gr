monor : forall {a : Type} .
        (phi1 : a [1]) -> (phi2 : (a -> a) [1]) -> (phi3 : a [1]) -> (a, a)
monor [x] [f] [y] =
 (f x, y)
-- (phi1, phi2)      phi3

monor' : forall {a : Type} .
        (phi1 : a [1]) -> (phi2 : (a -> a) [1]) -> (phi3 : a [1]) -> (a, a)
monor' [x] [f] [y] =
 (x, f y)
-- phi1      (phi2, phi3)

---------------

monorA : forall {a : Type} .
        (phi1 : a [0..1]) -> (phi2 : (a -> a) [0..1]) -> (phi3 : a [0..1]) -> (a, a)
monorA [x] [f] [y] =
 (x, y)
-- (phi1, phi2)      phi3

monorA' : forall {a : Type} .
        (phi1 : a [1]) -> (phi2 : (a -> a) [1]) -> (phi3 : a [1]) -> (a, a)
monorA' [x] [f] [y] =
 (x, f y)
-- phi1      (phi2, phi3)

pick : forall {a : Type} .
       a [0..1] -> a [0..1] -> a
pick [x] [y] = x

pick' : forall {a : Type} .
       a [0..1] -> a [0..1] -> a
pick' [x] [y] = y
